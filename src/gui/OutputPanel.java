/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import dataTypes.*;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.ScrollPaneConstants;
import javax.swing.border.BevelBorder;
import javax.swing.border.MatteBorder;
import java.awt.Color;

/**
 *
 * @author izhaq
 */
public class OutputPanel extends javax.swing.JPanel implements LogAreaListiner{

    LogAreaModel logAreaModel;
    /**
     * Creates new form OutputPanel
     */
    public OutputPanel() {
        
        initComponents();
        setBounds(218, 6, 760, 482);
        //outputlog.getDocument().addDocumentListener(new LimitLinesDocumentListener(10));
        //EnviermentHolder.getComponentMap().put(this.getName(), this);
    }

    public void setLogAreaModel(LogAreaModel logAreaModel) {
        this.logAreaModel = logAreaModel;
        this.logAreaModel.getListenr().addCellListner(this);

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logScroll = new javax.swing.JScrollPane();
        logScroll.setViewportBorder(new MatteBorder(1, 1, 1, 1, (Color) new Color(0, 0, 0)));
        logScroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        logScroll.setAutoscrolls(true);
        outputlog = new javax.swing.JTextArea();
        outputlog.setEditable(false);

        logScroll.setViewportView(outputlog);
        
        ///scroll down to the bottom allways
        logScroll.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {  
            public void adjustmentValueChanged(AdjustmentEvent e) {
                e.getAdjustable().setValue(e.getAdjustable().getMaximum());  
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private javax.swing.JScrollPane logScroll;
    private javax.swing.JTextArea outputlog;


    @Override
    public synchronized void updateLog(String dataToAdd) {
        Document doc = outputlog.getDocument();
        try {
            doc.insertString(doc.getLength() , dataToAdd, null);
            System.out.println(dataToAdd);
        } catch (BadLocationException ex) {
            Logger.getLogger(OutputPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
